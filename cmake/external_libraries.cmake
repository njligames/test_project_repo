if(EMSCRIPTEN)
  include("cmake/emscripten_external_libraries.cmake")
  list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __EMSCRIPTEN__)
elseif(WINDOWS)
  if(ARCH_64)
    list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __WINDOWS64__)
    if(OCULUS)
      include("cmake/oculus_windows64_external_libraries.cmake")
    else()
      include("cmake/windows64_external_libraries.cmake")
    endif()
  else()
    list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __WINDOWS32__)
    if(OCULUS)
      include("cmake/oculus_windows32_external_libraries.cmake")
    else()
      include("cmake/windows32_external_libraries.cmake")
    endif()
  endif()
elseif(APPLE)
  if(IOS)
    list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __IPHONEOS__)
    if(VR)
      include("cmake/vr_ios_external_libraries.cmake")
    else()
      include("cmake/ios_external_libraries.cmake")
    endif()
  elseif(TVOS)
    include("cmake/appletv_external_libraries.cmake")
    list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __APPLETVOS__)
  else()
    list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __MACOSX__)
    if(OCULUS)
      include("cmake/oculus_macos_external_libraries.cmake")
    else()
      include("cmake/macos_external_libraries.cmake")
    endif()
  endif()
elseif(UNIX AND NOT APPLE AND NOT ANDROID)
  if(LINUX)
    list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __LINUX__)
    if(OCULUS)
      include("cmake/oculus_linux_external_libraries.cmake")
    else()
      include("cmake/linux_external_libraries.cmake")
    endif()
  elseif(UNIX)
    include("cmake/unix_external_libraries.cmake")
    list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __UNIX__)
  endif()
elseif(ANDROID)
  include("cmake/android_external_libraries.cmake")
  list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS __ANDROID__)
endif()

