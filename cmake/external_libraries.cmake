# 
# set(${CMAKE_PROJECT_NAME}_SOUND_PLATFORM "openal" CACHE STRING "The rendering platform to use")
# set(${CMAKE_PROJECT_NAME}_SOUND_PLATFORM_Values "openal;fmod;sdl")
# 
if(EMSCRIPTEN)
  include("cmake/emscripten_external_libraries.cmake")
  add_definitions(-D__EMSCRIPTEN__)
  #   set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM "opengl_es_2" CACHE STRING "The rendering platform to use")
  #   set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values "opengl_es_2;opengl_es_3")
elseif(WINDOWS)
  if(ARCH_64)
    add_definitions(-D__WINDOWS64__)
    if(OCULUS)
      include("cmake/oculus_windows64_external_libraries.cmake")
    else()
      include("cmake/windows64_external_libraries.cmake")
    endif()
  else()
    add_definitions(-D__WINDOWS32__)
    if(OCULUS)
      include("cmake/oculus_windows32_external_libraries.cmake")
    else()
      include("cmake/windows32_external_libraries.cmake")
    endif()
  endif()
  #   set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM "opengl_2" CACHE STRING "The rendering platform to use")
  #   set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values "opengl_2;opengl_3")
elseif(APPLE)
  if(IOS)
    add_definitions(-D__IPHONEOS__)
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM "opengl_es_2" CACHE STRING "The rendering platform to use")
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values "opengl_es_2;opengl_es_3")
    if(VR)
      include("cmake/vr_ios_external_libraries.cmake")
    else()
      include("cmake/ios_external_libraries.cmake")
    endif()
  elseif(TVOS)
    include("cmake/appletv_external_libraries.cmake")
    add_definitions(-D__APPLETVOS__)
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM "opengl_es_2" CACHE STRING "The rendering platform to use")
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values "opengl_es_2;opengl_es_3")
  else()
    add_definitions(-D__MACOSX__)
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM "opengl_2" CACHE STRING "The rendering platform to use")
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values "opengl_2;opengl_3")
    if(OCULUS)
      include("cmake/oculus_macos_external_libraries.cmake")
    else()
      include("cmake/macos_external_libraries.cmake")
    endif()
  endif()
elseif(UNIX AND NOT APPLE AND NOT ANDROID)
  if(LINUX)
    add_definitions(-D__LINUX__)
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM "opengl_2" CACHE STRING "The rendering platform to use")
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values "opengl_2;opengl_3")
    if(OCULUS)
      include("cmake/oculus_linux_external_libraries.cmake")
    else()
      include("cmake/linux_external_libraries.cmake")
    endif()
  elseif(UNIX)
    include("cmake/unix_external_libraries.cmake")
    add_definitions(-D__UNIX__)
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM "opengl_2" CACHE STRING "The rendering platform to use")
    #     set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values "opengl_2;opengl_3")
  endif()
elseif(ANDROID)
  include("cmake/android_external_libraries.cmake")
  add_definitions(-D__ANDROID__)
  #   set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM "opengl_es_2" CACHE STRING "The rendering platform to use")
  #   set(${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values "opengl_es_2;opengl_es_3")
endif()

# set_property(CACHE ${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM PROPERTY STRINGS ${${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM_Values})
# 
# IF( ${${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM} STREQUAL "opengl_es_2" )
#   ADD_DEFINITIONS(-D__GL_ES2__)
# ELSEIF( ${${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM} STREQUAL "opengl_es_3" )
#   ADD_DEFINITIONS(-D__GL_ES3__)
# ELSEIF( ${${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM} STREQUAL "opengl_2" )
#   ADD_DEFINITIONS(-D__GL_2__)
# ELSEIF( ${${CMAKE_PROJECT_NAME}_GRAPHICS_PLATFORM} STREQUAL "opengl_3" )
#   ADD_DEFINITIONS(-D__GL_3__)
# ENDIF()
# 
# set_property(CACHE ${CMAKE_PROJECT_NAME}_SOUND_PLATFORM PROPERTY STRINGS ${${CMAKE_PROJECT_NAME}_SOUND_PLATFORM_Values})
# 
# IF( ${${CMAKE_PROJECT_NAME}_SOUND_PLATFORM} STREQUAL "fmod" )
#   ADD_DEFINITIONS(-DNJLI_SOUND_FMOD)
# ELSEIF( ${${CMAKE_PROJECT_NAME}_SOUND_PLATFORM} STREQUAL "openal" )
#   ADD_DEFINITIONS(-DNJLI_SOUND_OPENAL)
# ELSEIF( ${${CMAKE_PROJECT_NAME}_SOUND_PLATFORM} STREQUAL "sdl" )
#   ADD_DEFINITIONS(-DNJLI_SOUND_SDL)
# ENDIF()

